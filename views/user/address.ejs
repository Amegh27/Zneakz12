<%- include("../partials/user/header2") %>

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css">

<style>
  /* ============================================
     PREMIUM ADDRESS FORM DESIGN - ENHANCED
     ============================================ */
  
  :root {
    --primary-color: #070707;
    --primary-dark: #5568d3;
    --primary-light: #8b9ef5;
    --secondary-color: #000000;
    --accent-color: #7c747d;
    --success-color: #28a745;
    --danger-color: #dc3545;
    --light-bg: #f8f9fa;
    --card-bg: #ffffff;
    --border-color: #e9ecef;
    --text-primary: #1a1a1a;
    --text-secondary: #6c757d;
    --shadow-sm: 0 2px 8px rgba(102, 126, 234, 0.08);
    --shadow-md: 0 4px 16px rgba(102, 126, 234, 0.12);
    --shadow-lg: 0 8px 32px rgba(102, 126, 234, 0.2);
    --shadow-xl: 0 12px 48px rgba(102, 126, 234, 0.25);
    --transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }

  * {
    transition: var(--transition);
  }

  html, body {
    scroll-behavior: smooth;
  }

  body {
    background: linear-gradient(135deg, #d8d9dc 0%, #f5f4f7 50%, #e4dee4 100%);
    min-height: 100vh;
    position: relative;
  }

  body::before {
    content: '';
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: radial-gradient(circle at 20% 50%, rgba(240, 147, 251, 0.1) 0%, transparent 50%),
                radial-gradient(circle at 80% 80%, rgba(102, 126, 234, 0.1) 0%, transparent 50%);
    pointer-events: none;
    z-index: -1;
  }

  .profile-container {
    padding: 3rem 0;
    position: relative;
    z-index: 1;
  }

  /* ============================================
     SIDEBAR STYLES - ENHANCED
     ============================================ */
  
  .profile-sidebar {
    background: var(--card-bg);
    border-radius: 20px;
    overflow: hidden;
    min-height: 500px;
    border: 1px solid rgba(102, 126, 234, 0.1);
    box-shadow: var(--shadow-lg);
    display: flex;
    flex-direction: column;
    position: relative;
  }

  .profile-sidebar::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 4px;
    background: linear-gradient(90deg, var(--primary-color), var(--secondary-color), var(--accent-color));
  }

  .profile-sidebar:hover {
    box-shadow: var(--shadow-xl);
    transform: translateY(-4px);
  }

  .profile-sidebar .user-box {
    background: linear-gradient(135deg, var(--primary-color) 0%, var(--secondary-color) 100%);
    color: #ffffff;
    padding: 32px 24px;
    display: flex;
    align-items: center;
    gap: 18px;
    border-bottom: 1px solid rgba(255, 255, 255, 0.15);
    position: relative;
    overflow: hidden;
  }

  .profile-sidebar .user-box::after {
    content: '';
    position: absolute;
    top: -50%;
    right: -50%;
    width: 200px;
    height: 200px;
    background: radial-gradient(circle, rgba(255, 255, 255, 0.1) 0%, transparent 70%);
    border-radius: 50%;
  }

  .profile-sidebar .user-box .user-info {
    flex: 1;
    position: relative;
    z-index: 1;
  }

  .profile-sidebar .user-box .user-label {
    font-size: 0.75rem;
    color: rgba(255, 255, 255, 0.85);
    margin-bottom: 8px;
    text-transform: uppercase;
    letter-spacing: 1.2px;
    font-weight: 700;
  }

  .profile-sidebar .user-box .user-name {
    font-size: 1.2rem;
    font-weight: 800;
    color: #ffffff;
    word-break: break-word;
    letter-spacing: 0.3px;
  }

  .profile-sidebar .list-group {
    border: none;
    flex: 1;
    padding: 12px 0;
  }

  .profile-sidebar .list-group-item {
    border: none;
    padding: 16px 20px;
    color: var(--text-secondary);
    border-left: 4px solid transparent;
    font-weight: 500;
    font-size: 0.95rem;
    background: transparent;
    position: relative;
    display: flex;
    align-items: center;
    gap: 12px;
  }

  .profile-sidebar .list-group-item i {
    width: 20px;
    text-align: center;
    font-size: 1.1rem;
  }

  .profile-sidebar .list-group-item::before {
    content: '';
    position: absolute;
    left: 0;
    top: 0;
    bottom: 0;
    width: 4px;
    background: linear-gradient(180deg, var(--primary-color), var(--secondary-color));
    transform: scaleY(0);
    transform-origin: center;
  }

  .profile-sidebar .list-group-item:hover {
    background-color: rgba(102, 126, 234, 0.1);
    color: var(--primary-color);
    border-left-color: var(--primary-color);
    padding-left: 24px;
  }

  .profile-sidebar .list-group-item:hover::before {
    transform: scaleY(1);
  }

  .profile-sidebar .list-group-item.active {
    background: linear-gradient(90deg, rgba(102, 126, 234, 0.15) 0%, transparent 100%);
    color: var(--primary-color);
    border-left-color: var(--primary-color);
    font-weight: 700;
    padding-left: 24px;
  }

  .profile-sidebar .list-group-item.active::before {
    transform: scaleY(1);
  }

  /* ============================================
     MAIN CONTENT AREA - ENHANCED
     ============================================ */
  
  .profile-main {
    background: var(--card-bg);
    border-radius: 20px;
    padding: 48px;
    min-height: 550px;
    box-shadow: var(--shadow-lg);
    border: 1px solid rgba(102, 126, 234, 0.1);
    position: relative;
    overflow: hidden;
  }

  .profile-main::before {
    content: '';
    position: absolute;
    top: -50%;
    right: -50%;
    width: 300px;
    height: 300px;
    background: radial-gradient(circle, rgba(102, 126, 234, 0.05) 0%, transparent 70%);
    border-radius: 50%;
  }

  .section-card {
    background: var(--card-bg);
    border-radius: 16px;
    padding: 40px;
    border: 1px solid rgba(102, 126, 234, 0.08);
    box-shadow: var(--shadow-sm);
    position: relative;
    z-index: 1;
  }

  .section-card h4 {
    color: var(--text-primary);
    font-weight: 800;
    letter-spacing: 0.5px;
    margin-bottom: 36px;
    padding-bottom: 24px;
    border-bottom: 3px solid var(--border-color);
    font-size: 1.5rem;
    display: flex;
    align-items: center;
    gap: 12px;
  }

  .section-card h4 i {
    color: var(--primary-color);
    font-size: 1.8rem;
  }

  /* ============================================
     ADDRESS LIST STYLES
     ============================================ */
  
  .address-list {
    list-style: none;
    padding: 0;
    margin-bottom: 40px;
  }

  .address-item {
    background: var(--light-bg);
    border: 2px solid var(--border-color);
    border-radius: 16px;
    padding: 24px;
    margin-bottom: 20px;
    position: relative;
    transition: var(--transition);
  }

  .address-item:hover {
    border-color: var(--primary-color);
    box-shadow: var(--shadow-md);
    transform: translateY(-2px);
  }

  .address-item.default-address {
    border-color: var(--success-color);
    background: linear-gradient(135deg, rgba(40, 167, 69, 0.05) 0%, var(--light-bg) 100%);
  }

  .address-details {
    margin-bottom: 20px;
  }

  .address-details .detail-row {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 8px;
    font-size: 0.95rem;
  }

  .address-details .detail-label {
    font-weight: 600;
    color: var(--text-secondary);
    min-width: 80px;
  }

  .address-details .detail-value {
    color: var(--text-primary);
    font-weight: 500;
    text-align: right;
  }

  .address-actions {
    display: flex;
    justify-content: flex-end;
    gap: 8px;
    border-top: 1px solid var(--border-color);
    padding-top: 16px;
    align-items: center;
  }

  .address-actions .btn,
  .address-actions .btn:disabled {
    padding: 8px 16px;
    font-size: 0.85rem;
    border-radius: 8px;
    font-weight: 600;
  }

  .btn-set-default {
    background: var(--success-color);
    color: white;
    border: none;
  }

  .btn-set-default:hover {
    background: #218838;
  }

  .btn-edit {
    background: var(--primary-color);
    color: white;
    border: none;
  }

  .btn-edit:hover {
    background: var(--secondary-color);
  }

  .btn-delete {
    background: var(--danger-color);
    color: white;
    border: none;
  }

  .btn-delete:hover {
    background: #c82333;
  }

  .default-indicator {
    background: var(--success-color);
    color: white;
    border: none;
    cursor: default;
  }

  /* Edit Mode for Address Item */
  .address-item.editing {
    border-color: var(--primary-color);
    background: #ffffff;
  }

  .address-item.editing .address-details {
    display: none;
  }

  .address-item.editing .address-edit-form {
    display: block;
  }

  .address-edit-form {
    display: none;
  }

  .address-edit-form .form-group {
    margin-bottom: 16px;
  }

  .address-edit-form .form-control {
    border: 2px solid var(--border-color);
    border-radius: 8px;
    padding: 10px 12px;
    font-size: 0.9rem;
  }

  .address-edit-form .form-control:focus {
    border-color: var(--primary-color);
    box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
  }

  /* Add New Address Form */
  .add-address-section {
    border: 2px dashed var(--border-color);
    border-radius: 16px;
    padding: 32px;
    text-align: center;
    margin-bottom: 40px;
    transition: var(--transition);
    cursor: pointer;
  }

  .add-address-section:hover {
    border-color: var(--primary-color);
    background: rgba(102, 126, 234, 0.05);
  }

  .add-address-section i {
    font-size: 3rem;
    color: var(--text-secondary);
    margin-bottom: 16px;
    display: block;
  }

  .add-address-section h5 {
    color: var(--text-primary);
    font-weight: 700;
    margin-bottom: 8px;
  }

  .add-address-section p {
    color: var(--text-secondary);
    margin: 0;
  }

  .add-address-form {
    display: none;
    background: var(--card-bg);
    border-radius: 16px;
    padding: 32px;
    margin-top: 20px;
    box-shadow: var(--shadow-sm);
  }

  /* ============================================
     FORM STYLES - ENHANCED
     ============================================ */
  
  .form-label {
    color: var(--text-primary);
    font-size: 0.85rem;
    font-weight: 700;
    margin-bottom: 12px;
    text-transform: uppercase;
    letter-spacing: 0.6px;
    display: block;
  }

  .form-control {
    border: 2px solid var(--border-color);
    border-radius: 12px;
    padding: 14px 18px;
    font-size: 0.95rem;
    background: #fafbfc;
    color: var(--text-primary);
    font-weight: 500;
    position: relative;
  }

  .form-control[readonly] {
    background: #f8f9fa;
    opacity: 0.7;
  }

  .form-control::placeholder {
    color: var(--text-secondary);
  }

  .form-control:focus {
    border-color: var(--primary-color);
    background: #ffffff;
    box-shadow: 0 0 0 5px rgba(102, 126, 234, 0.15);
    outline: none;
    transform: translateY(-2px);
  }

  .form-control:hover:not(:focus) {
    border-color: rgba(22, 24, 31, 0.4);
    background: #ffffff;
  }

  /* ============================================
     BUTTON STYLES - ENHANCED
     ============================================ */
  
  .btn-dark {
    background: linear-gradient(135deg, var(--primary-color) 0%, var(--secondary-color) 100%);
    border: none;
    color: white;
    font-weight: 700;
    padding: 14px 32px;
    border-radius: 12px;
    font-size: 0.95rem;
    box-shadow: 0 6px 20px rgba(102, 126, 234, 0.35);
    position: relative;
    overflow: hidden;
    display: inline-flex;
    align-items: center;
    gap: 8px;
    letter-spacing: 0.3px;
  }

  .btn-dark::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
    transition: left 0.5s ease;
  }

  .btn-dark:hover {
    transform: translateY(-4px);
    box-shadow: 0 10px 32px rgba(102, 126, 234, 0.45);
    color: white;
  }

  .btn-dark:hover::before {
    left: 100%;
  }

  .btn-dark:active {
    transform: translateY(-2px);
  }

  .btn-dark:disabled {
    opacity: 0.7;
    cursor: not-allowed;
    transform: none;
  }

  /* ============================================
     FORM ACTIONS
     ============================================ */
  
  .form-actions {
    display: flex;
    justify-content: flex-end;
    align-items: center;
    margin-top: 40px;
    padding-top: 32px;
    border-top: 3px solid var(--border-color);
    gap: 20px;
  }

  /* ============================================
     ANIMATIONS
     ============================================ */
  
  @keyframes slideInUp {
    from {
      opacity: 0;
      transform: translateY(30px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }

  .section-card {
    animation: slideInUp 0.6s ease-out;
  }

  .profile-sidebar {
    animation: slideInUp 0.6s ease-out 0.15s both;
  }

  .profile-main {
    animation: fadeIn 0.5s ease-out;
  }

  /* ============================================
     RESPONSIVE DESIGN
     ============================================ */
  
  @media (max-width: 991px) {
    .profile-container {
      padding: 2rem 0;
    }

    .profile-main {
      padding: 32px;
    }

    .section-card {
      padding: 28px;
    }

    .profile-sidebar .user-box {
      padding: 24px;
    }

    .form-actions {
      justify-content: center;
    }

    .section-card h4 {
      font-size: 1.3rem;
      margin-bottom: 28px;
    }

    .address-actions {
      flex-direction: column;
      gap: 6px;
    }

    .address-actions .btn {
      width: 100%;
    }
  }

  @media (max-width: 576px) {
    .profile-container {
      padding: 1rem 0;
    }

    .profile-main {
      padding: 24px;
      border-radius: 16px;
    }

    .section-card {
      padding: 24px;
      border-radius: 14px;
    }

    .profile-sidebar {
      min-height: auto;
      margin-bottom: 24px;
      border-radius: 16px;
    }

    .form-label {
      font-size: 0.8rem;
    }

    .form-control {
      padding: 12px 14px;
      font-size: 0.9rem;
    }

    .section-card h4 {
      font-size: 1.1rem;
    }

    .form-actions {
      flex-direction: column;
      align-items: stretch;
    }

    .form-actions button {
      width: 100%;
      justify-content: center;
    }

    .address-item {
      padding: 20px;
    }

    .address-details .detail-row {
      flex-direction: column;
      align-items: flex-start;
      gap: 4px;
      text-align: left;
    }

    .address-details .detail-value {
      text-align: left;
    }
  }
</style>

<div class="container profile-container">
  <div class="row g-4">
    <!-- SIDEBAR -->
    <div class="col-lg-3">
      <div class="profile-sidebar">
        <!-- User Info Header -->
        <div class="user-box">
          <div class="profile-avatar">
            <img id="sidebarAvatar" src="<%= user.avatar || '/images/user-avatar.png' %>" alt="User Avatar" class="rounded-circle" style="width: 56px; height: 56px; object-fit: cover;">
          </div>
          <div class="user-info">
            <div class="user-label">Welcome</div>
            <div class="user-name"><%= user.name || 'User' %></div>
          </div>
        </div>

        <!-- Navigation Menu -->
        <div class="list-group">
          <a href="/profile" class="list-group-item list-group-item-action" data-tab="profile">
            <i class="bi bi-person-fill"></i> Profile
          </a>
          <a href="#" class="list-group-item list-group-item-action" data-tab="wallet">
            <i class="bi bi-wallet2"></i> Wallet
          </a>
          <a href="/address" class="list-group-item list-group-item-action active" data-tab="address">
            <i class="bi bi-geo-alt-fill"></i> Address
          </a>
          <a href="/orders" class="list-group-item list-group-item-action">
            <i class="bi bi-bag-fill"></i> Orders
          </a>
          <a href="/logout" id="logout-link" class="list-group-item list-group-item-action">
            <i class="bi bi-box-arrow-right"></i> Logout
          </a>
        </div>
      </div>
    </div>

    <!-- MAIN CONTENT -->
    <div class="col-lg-9">
      <div class="profile-main">
        <div id="tab-address" class="section-card">
          <h4>
            <i class="bi bi-geo-alt-fill"></i> Your Addresses
          </h4>

          <!-- Add New Address Section -->
          <div class="add-address-section" id="addAddressTrigger">
            <i class="bi bi-plus-circle"></i>
            <h5>Add New Address</h5>
            <p>Click to add a new delivery address</p>
          </div>

          <!-- Add New Address Form -->
          <form id="addAddressForm" class="add-address-form row g-3" style="display: none;">
            <div class="col-md-6">
              <label class="form-label">Name</label>
              <input type="text" class="form-control" value="<%= user.name || '' %>" >
            </div>
            <div class="col-md-6">
              <label class="form-label">Phone</label>
              <input type="text" class="form-control" value="<%= user.phone || '' %>" >
            </div>
            <div class="col-md-12">
              <label class="form-label"><i class="bi bi-house-fill"></i> Address</label>
              <input type="text" class="form-control" name="name" placeholder="Enter your full address" maxlength="40">
            </div>
            <div class="col-md-12">
              <label class="form-label"><i class="bi bi-building"></i> City</label>
              <input type="text" class="form-control" name="city" placeholder="Enter your city" maxlength="40">
            </div>
            <div class="col-md-6">
              <label class="form-label"><i class="bi bi-map"></i> State</label>
              <input type="text" class="form-control" name="state" placeholder="Enter your state" maxlength="40">
            </div>
            <div class="col-md-6">
              <label class="form-label"><i class="bi bi-pin-map"></i> Pincode</label>
              <input type="text" class="form-control" name="pincode" placeholder="Enter your pincode" maxlength="6">
            </div>
            <div class="col-12 form-actions">
              <button type="button" id="cancelAddBtn" class="btn btn-secondary me-2">Cancel</button>
              <button type="submit" class="btn btn-dark">
                <i class="bi bi-plus-circle-fill"></i> Add Address
              </button>
            </div>
          </form>

          <!-- Address List -->
          <% if (addresses && addresses.length > 0) { %>
            <ul class="address-list">
              <% addresses.forEach((addr, index) => { %>
                <li class="address-item <%= index === 0 ? 'default-address' : '' %>">
                  <!-- View Mode -->
                  <div class="address-details">
                    <div class="detail-row">
                      <span class="detail-label">Name:</span>
                      <span class="detail-value"><%= user.name %></span>
                    </div>
                    <div class="detail-row">
                      <span class="detail-label">Phone:</span>
                      <span class="detail-value"><%= user.phone || 'Not provided' %></span>
                    </div>
                    <div class="detail-row">
                      <span class="detail-label">Address:</span>
                      <span class="detail-value"><%= addr.name %></span>
                    </div>
                    <div class="detail-row">
                      <span class="detail-label">City:</span>
                      <span class="detail-value"><%= addr.city %></span>
                    </div>
                    <div class="detail-row">
                      <span class="detail-label">State:</span>
                      <span class="detail-value"><%= addr.state %></span>
                    </div>
                    <div class="detail-row">
                      <span class="detail-label">Pincode:</span>
                      <span class="detail-value"><%= addr.pincode %></span>
                    </div>
                  </div>

                  <!-- Edit Mode -->
                  <form class="address-edit-form row g-3">
                    <input type="hidden" name="addressId" value="<%= addr._id %>">
                    <div class="col-md-6">
                      <label class="form-label">Name</label>
                      <input type="text" class="form-control" value="<%= user.name || '' %>" readonly>
                    </div>
                    <div class="col-md-6">
                      <label class="form-label">Phone</label>
                      <input type="text" class="form-control" value="<%= user.phone || '' %>" readonly>
                    </div>
                    <div class="col-md-12">
                      <label class="form-label"><i class="bi bi-house-fill"></i> Address</label>
                      <input type="text" class="form-control" name="name" value="<%= addr.name %>" maxlength="40">
                    </div>
                    <div class="col-md-12">
                      <label class="form-label"><i class="bi bi-building"></i> City</label>
                      <input type="text" class="form-control" name="city" value="<%= addr.city %>" maxlength="40">
                    </div>
                    <div class="col-md-6">
                      <label class="form-label"><i class="bi bi-map"></i> State</label>
                      <input type="text" class="form-control" name="state" value="<%= addr.state %>" maxlength="40">
                    </div>
                    <div class="col-md-6">
                      <label class="form-label"><i class="bi bi-pin-map"></i> Pincode</label>
                      <input type="text" class="form-control" name="pincode" value="<%= addr.pincode %>" maxlength="6">
                    </div>
                    <div class="col-12 form-actions">
                      <button type="button" class="btn btn-secondary cancel-edit-btn me-2">Cancel</button>
                      <button type="submit" class="btn btn-dark save-edit-btn">
                        <i class="bi bi-check-circle-fill"></i> Save Changes
                      </button>
                    </div>
                  </form>

                  <!-- Actions -->
                  <div class="address-actions">
                    <% if (index === 0) { %>
                      <button type="button" class="btn btn-success default-indicator me-2" disabled>
                        <i class="bi bi-star-fill"></i> Default
                      </button>
                    <% } else { %>
                      <button type="button" class="btn btn-set-default" data-id="<%= addr._id %>">
                        <i class="bi bi-star-fill"></i> Set Default
                      </button>
                    <% } %>
                    <button type="button" class="btn btn-edit" data-id="<%= addr._id %>">
                      <i class="bi bi-pencil-fill"></i> Edit
                    </button>
                    <button type="button" class="btn btn-delete" data-id="<%= addr._id %>">
                      <i class="bi bi-trash-fill"></i> Delete
                    </button>
                  </div>
                </li>
              <% }) %>
            </ul>
          <% } else { %>
            <div class="text-center py-5">
              <i class="bi bi-geo-alt" style="font-size: 4rem; color: var(--text-secondary); display: block; margin-bottom: 16px;"></i>
              <h5>No Addresses Added</h5>
              <p class="text-muted">Add your first delivery address to get started.</p>
            </div>
          <% } %>

        </div>
      </div>
    </div>
  </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script src="//cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
  // Generic validation function
  function validateAddress(formData) {
    const { name: address, city, state, pincode } = formData;
    if (!address || address.trim().length === 0) return { valid: false, msg: 'Address is required' };
    if (address.trim().length > 40) return { valid: false, msg: 'Address must be 40 characters or less' };
    if (!city || city.trim().length === 0) return { valid: false, msg: 'City is required' };
    if (city.trim().length > 40) return { valid: false, msg: 'City must be 40 characters or less' };
    if (!state || state.trim().length === 0) return { valid: false, msg: 'State is required' };
    if (state.trim().length > 40) return { valid: false, msg: 'State must be 40 characters or less' };
    if (!pincode || pincode.trim().length !== 6 || !/^\d{6}$/.test(pincode.trim())) return { valid: false, msg: 'Pincode must be exactly 6 digits' };
    return { valid: true };
  }

  // Trim form data
  function trimFormData(formData) {
    const trimmed = { ...formData };
    Object.keys(trimmed).forEach(key => {
      if (key !== 'addressId') trimmed[key] = trimmed[key].trim();
    });
    return trimmed;
  }

  // Add New Address Handler
  document.getElementById('addAddressTrigger').addEventListener('click', () => {
    document.getElementById('addAddressTrigger').style.display = 'none';
    document.getElementById('addAddressForm').style.display = 'block';
  });

  document.getElementById('cancelAddBtn').addEventListener('click', () => {
    document.getElementById('addAddressForm').style.display = 'none';
    document.getElementById('addAddressTrigger').style.display = 'block';
    document.getElementById('addAddressForm').reset();
  });

  document.getElementById('addAddressForm').addEventListener('submit', async (e) => {
    e.preventDefault();
    const formData = trimFormData(Object.fromEntries(new FormData(e.target).entries()));
    const validation = validateAddress(formData);
    if (!validation.valid) {
      Swal.fire('Error', validation.msg, 'error');
      return;
    }

    const submitBtn = e.target.querySelector('button[type="submit"]');
    const originalText = submitBtn.innerHTML;
    submitBtn.disabled = true;
    submitBtn.innerHTML = '<i class="bi bi-hourglass-split"></i> Adding...';

    try {
      const res = await fetch('/address', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(formData)
      });

      if (!res.ok) {
        let errorMsg = `Server error (${res.status})`;
        try {
          const errorData = await res.json();
          errorMsg = errorData.message || errorMsg;
        } catch {} 
        throw new Error(errorMsg);
      }

      const data = await res.json();
      if (data.success) {
        Swal.fire('Success', data.message, 'success').then(() => {
          window.location.reload();
        });
      } else {
        throw new Error(data.message || 'Failed to add address');
      }
    } catch (err) {
      Swal.fire('Error', err.message, 'error');
    } finally {
      submitBtn.disabled = false;
      submitBtn.innerHTML = originalText;
    }
  });

  // Edit Handlers (per address)
  document.querySelectorAll('.btn-edit').forEach(btn => {
    btn.addEventListener('click', (e) => {
      const addressItem = e.target.closest('.address-item');
      addressItem.classList.add('editing');
    });
  });

  // Cancel Edit
  document.addEventListener('click', (e) => {
    if (e.target.classList.contains('cancel-edit-btn')) {
      e.target.closest('.address-item').classList.remove('editing');
    }
  });

  // Save Edit
  document.addEventListener('submit', async (e) => {
    if (e.target.classList.contains('address-edit-form')) {
      e.preventDefault();
      const formData = trimFormData(Object.fromEntries(new FormData(e.target).entries()));
      const { addressId } = formData;
      const validation = validateAddress(formData);
      if (!validation.valid) {
        Swal.fire('Error', validation.msg, 'error');
        return;
      }

      const submitBtn = e.target.querySelector('.save-edit-btn');
      const originalText = submitBtn.innerHTML;
      submitBtn.disabled = true;
      submitBtn.innerHTML = '<i class="bi bi-hourglass-split"></i> Saving...';

      try {
        const res = await fetch(`/address/edit/${addressId}`, {
          method: 'PUT',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(formData)
        });

        if (!res.ok) {
          let errorMsg = `Server error (${res.status})`;
          try {
            const errorData = await res.json();
            errorMsg = errorData.message || errorMsg;
          } catch {}
          throw new Error(errorMsg);
        }

        const data = await res.json();
        if (data.success) {
          Swal.fire('Success', data.message, 'success').then(() => {
            window.location.reload();
          });
        } else {
          throw new Error(data.message || 'Failed to update address');
        }
      } catch (err) {
        Swal.fire('Error', err.message, 'error');
      } finally {
        submitBtn.disabled = false;
        submitBtn.innerHTML = originalText;
      }
    }
  });

  // Delete Address
  document.querySelectorAll('.btn-delete').forEach(btn => {
    btn.addEventListener('click', async (e) => {
      const addressId = e.target.dataset.id;
      const result = await Swal.fire({
        title: 'Are you sure?',
        text: 'This address will be permanently deleted!',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#d33',
        cancelButtonColor: '#3085d6',
        confirmButtonText: 'Yes, delete it!'
      });

      if (result.isConfirmed) {
        try {
          const res = await fetch(`/address/delete/${addressId}`, { method: 'DELETE' });
          if (res.ok) {
            Swal.fire('Deleted!', 'Address has been deleted.', 'success').then(() => {
              window.location.reload();
            });
          } else {
            const errorData = await res.json();
            Swal.fire('Error', errorData.message || 'Failed to delete address', 'error');
          }
        } catch (err) {
          Swal.fire('Error', 'Network error. Please try again.', 'error');
        }
      }
    });
  });

  // Set Default Address
  document.querySelectorAll('.btn-set-default').forEach(btn => {
    btn.addEventListener('click', async (e) => {
      const addressId = e.target.dataset.id;
      const submitBtn = e.target;
      const originalText = submitBtn.innerHTML;
      submitBtn.disabled = true;
      submitBtn.innerHTML = '<i class="bi bi-hourglass-split"></i> Setting...';

      try {
        const res = await fetch(`/address/set-default/${addressId}`, { method: 'PUT' });
        if (res.ok) {
          Swal.fire('Success', 'Address set as default!', 'success').then(() => {
            window.location.reload();
          });
        } else {
          const errorData = await res.json();
          Swal.fire('Error', errorData.message || 'Failed to set default', 'error');
        }
      } catch (err) {
        Swal.fire('Error', 'Network error. Please try again.', 'error');
      } finally {
        submitBtn.disabled = false;
        submitBtn.innerHTML = originalText;
      }
    });
  });

  document.getElementById("logout-link").addEventListener("click", function(event) {
    event.preventDefault();

    Swal.fire({
      title: 'Are you sure?',
      text: "You will be logged out.",
      icon: 'warning',
      showCancelButton: true,
      confirmButtonColor: '#667eea',
      cancelButtonColor: '#d33',
      confirmButtonText: 'Yes, logout',
      cancelButtonText: 'Cancel'
    }).then((result) => {
      if (result.isConfirmed) {
        window.location.href = "/logout";
      }
    });
  });
</script>

<%- include("../partials/user/footer") %>