<%- include("../partials/user/header2") %>

<head>
  <meta charset="UTF-8">
  <title>Checkout - ZNEAKZ</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
  <script src="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.js"></script>
  <script src="//cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <style>
    /* Enhanced black and white styling for checkout page */
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      background: linear-gradient(135deg, #f5f5f5 0%, #ffffff 100%);
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
      color: #1a1a1a;
    }

    .container {
      max-width: 1200px;
      margin: 0 auto;
    }

    h3 {
      font-size: 2.5rem;
      font-weight: 700;
      color: #000;
      letter-spacing: -0.5px;
      margin-bottom: 3rem !important;
    }

    h4, h5 {
      font-weight: 600;
      color: #1a1a1a;
      margin-bottom: 1.5rem;
    }

    .section-card {
      background: white;
      border-radius: 12px;
      padding: 2rem;
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);
      border: 1px solid #e8e8e8;
      transition: all 0.3s ease;
    }

    .section-card:hover {
      box-shadow: 0 4px 16px rgba(0, 0, 0, 0.12);
    }

    .form-check {
      padding: 1rem;
      border-radius: 8px;
      background: #fafafa;
      border: 2px solid transparent;
      transition: all 0.2s ease;
    }

    .form-check:hover {
      background: #f0f0f0;
      border-color: #d0d0d0;
    }

    .form-check-input {
      width: 20px;
      height: 20px;
      margin-top: 0.3rem;
      cursor: pointer;
      border: 2px solid #ccc;
      accent-color: #000;
    }

    .form-check-input:checked {
      background-color: #000;
      border-color: #000;
    }

    .form-check-label {
      cursor: pointer;
      margin-left: 0.5rem;
      font-size: 0.95rem;
    }

    .btn-outline-dark {
      border: 2px solid #000;
      color: #000;
      font-weight: 600;
      border-radius: 8px;
      padding: 0.6rem 1.5rem;
      transition: all 0.3s ease;
    }

    .btn-outline-dark:hover {
      background-color: #000;
      color: white;
      transform: translateY(-2px);
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    }

    .btn-dark {
      background-color: #000;
      border: none;
      font-weight: 600;
      border-radius: 8px;
      padding: 0.7rem 1.5rem;
      transition: all 0.3s ease;
    }

    .btn-dark:hover {
      background-color: #1a1a1a;
      transform: translateY(-2px);
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
    }

    .btn-secondary {
      background-color: #e8e8e8;
      border: none;
      color: #1a1a1a;
      font-weight: 600;
      border-radius: 8px;
      transition: all 0.3s ease;
    }

    .btn-secondary:hover {
      background-color: #d0d0d0;
      color: #000;
    }

    .btn-primary {
      background-color: #000;
      border: none;
      font-weight: 700;
      border-radius: 8px;
      padding: 0.8rem 1.5rem;
      font-size: 1rem;
      transition: all 0.3s ease;
    }

    .btn-primary:hover {
      background-color: #1a1a1a;
      transform: translateY(-2px);
      box-shadow: 0 6px 16px rgba(0, 0, 0, 0.2);
    }

    .card {
      border: 1px solid #e8e8e8;
      border-radius: 12px;
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);
      overflow: hidden;
    }

    .card-body {
      padding: 2rem;
      background: white;
    }

    .d-flex {
      display: flex;
      align-items: center;
    }

    .d-flex.justify-content-between {
      justify-content: space-between;
    }

    .border-bottom {
      border-bottom: 1px solid #e8e8e8 !important;
      padding: 1rem 0;
    }

    .border-bottom img {
      border-radius: 6px;
      margin-right: 1rem;
      object-fit: cover;
    }

    .border-bottom span {
      font-size: 0.95rem;
      color: #1a1a1a;
    }

    hr {
      border: none;
      border-top: 2px solid #e8e8e8;
      margin: 1.5rem 0;
    }

    /* Address List Styles from Address Page */
    .address-list {
      list-style: none;
      padding: 0;
      margin-bottom: 40px;
    }

    .address-item {
      background: #fafafa;
      border: 2px solid #e8e8e8;
      border-radius: 12px;
      padding: 1.5rem;
      margin-bottom: 1rem;
      position: relative;
      transition: all 0.3s ease;
      display: flex;
      flex-direction: column;
    }

    .address-item:hover {
      border-color: #000;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    }

    .address-item.default-address {
      border-color: #000;
      background: linear-gradient(135deg, rgba(0, 0, 0, 0.02) 0%, #fafafa 100%);
    }

    .address-details {
      margin-bottom: 1rem;
      margin-top: 2.5rem;
    }

    .address-details .detail-row {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 0.5rem;
      font-size: 0.9rem;
    }

    .address-details .detail-label {
      font-weight: 600;
      color: #666;
      min-width: 80px;
    }

    .address-details .detail-value {
      color: #1a1a1a;
      font-weight: 500;
      text-align: right;
    }

    .address-radio {
      position: absolute;
      top: 1rem;
      left: 1rem;
      z-index: 1;
    }

    .address-actions {
      display: flex;
      justify-content: flex-end;
      gap: 0.5rem;
      border-top: 1px solid #e8e8e8;
      padding-top: 1rem;
      margin-top: auto;
    }

    .address-actions .btn {
      padding: 0.4rem 0.8rem;
      font-size: 0.8rem;
      border-radius: 6px;
      font-weight: 600;
    }

    .btn-edit {
      background: #000;
      color: white;
      border: none;
    }

    .btn-edit:hover {
      background: #1a1a1a;
    }

    .btn-delete {
      background: #dc3545;
      color: white;
      border: none;
    }

    .btn-delete:hover {
      background: #c82333;
    }

    /* Edit Mode for Address Item */
    .address-item.editing {
      border-color: #000;
      background: white;
    }

    .address-item.editing .address-details {
      display: none;
    }

    .address-item.editing .address-edit-form {
      display: block;
    }

    .address-edit-form {
      display: none;
    }

    .address-edit-form .form-group {
      margin-bottom: 1rem;
    }

    .address-edit-form .form-control {
      border: 2px solid #e8e8e8;
      border-radius: 6px;
      padding: 0.5rem 0.75rem;
      font-size: 0.9rem;
    }

    .address-edit-form .form-control:focus {
      border-color: #000;
      box-shadow: 0 0 0 2px rgba(0, 0, 0, 0.1);
    }

    /* Add New Address Section */
    .add-address-section {
      border: 2px dashed #e8e8e8;
      border-radius: 12px;
      padding: 2rem;
      text-align: center;
      margin-bottom: 2rem;
      transition: all 0.3s ease;
      cursor: pointer;
    }

    .add-address-section:hover {
      border-color: #000;
      background: rgba(0, 0, 0, 0.02);
    }

    .add-address-section i {
      font-size: 2rem;
      color: #666;
      margin-bottom: 1rem;
      display: block;
    }

    .add-address-section h5 {
      color: #1a1a1a;
      font-weight: 700;
      margin-bottom: 0.5rem;
    }

    .add-address-section p {
      color: #666;
      margin: 0;
    }

    .add-address-form {
      display: none;
      background: white;
      border-radius: 12px;
      padding: 2rem;
      margin-bottom: 2rem;
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);
    }

    .form-label {
      color: #1a1a1a;
      font-size: 0.85rem;
      font-weight: 700;
      margin-bottom: 0.5rem;
      text-transform: uppercase;
      letter-spacing: 0.6px;
      display: block;
    }

    .form-control {
      border: 1px solid #d0d0d0;
      border-radius: 6px;
      padding: 0.7rem 1rem;
      font-size: 0.95rem;
      transition: all 0.2s ease;
    }

    .form-control:focus {
      border-color: #000;
      box-shadow: 0 0 0 3px rgba(0, 0, 0, 0.1);
    }

    .form-control[readonly] {
      background: #f8f9fa;
      opacity: 0.7;
    }

    .py-5 {
      padding: 3rem 1rem !important;
    }

    .text-center {
      text-align: center;
    }

    p {
      color: #666;
      font-size: 0.95rem;
    }

    /* Responsive adjustments */
    @media (max-width: 768px) {
      .address-item {
        padding: 1rem;
      }

      .address-details .detail-row {
        flex-direction: column;
        align-items: flex-start;
        gap: 0.25rem;
        text-align: left;
      }

      .address-details .detail-value {
        text-align: left;
      }

      .address-actions {
        flex-direction: column;
        gap: 0.25rem;
      }

      .address-actions .btn {
        width: 100%;
      }
    }
  </style>
</head>
<body class="bg-light">

<div class="container py-5">
  <h3 class="mb-4 text-center">Checkout</h3>

  <div class="row">
    <!-- Addresses -->
    <div class="col-md-6 checkout-address-section section-card mb-4">
      <h4>Delivery Address</h4>

      <!-- Add New Address Section -->
      <div class="add-address-section" id="addAddressTrigger">
        <i class="bi bi-plus-circle"></i>
        <h5>Add New Address</h5>
        <p>Click to add a new delivery address</p>
      </div>

      <!-- Add New Address Form -->
      <form id="addAddressForm" class="add-address-form row g-3" style="display: none;">
        <div class="col-md-6">
          <label class="form-label">Name</label>
          <input type="text" class="form-control" value="<%= user.name || '' %>" readonly>
        </div>
        <div class="col-md-6">
          <label class="form-label">Phone</label>
          <input type="text" class="form-control" value="<%= user.phone || '' %>" readonly>
        </div>
        <div class="col-md-12">
          <label class="form-label">Address</label>
          <input type="text" class="form-control" name="name" placeholder="Enter your full address" maxlength="40" required>
        </div>
        <div class="col-md-12">
          <label class="form-label">City</label>
          <input type="text" class="form-control" name="city" placeholder="Enter your city" maxlength="40" required>
        </div>
        <div class="col-md-6">
          <label class="form-label">State</label>
          <input type="text" class="form-control" name="state" placeholder="Enter your state" maxlength="40" required>
        </div>
        <div class="col-md-6">
          <label class="form-label">Pincode</label>
          <input type="text" class="form-control" name="pincode" placeholder="Enter your pincode" maxlength="6" required>
        </div>
        <div class="col-12 form-actions">
          <button type="button" id="cancelAddBtn" class="btn btn-secondary me-2">Cancel</button>
          <button type="submit" class="btn btn-dark">
            Add Address
          </button>
        </div>
      </form>

      <!-- Address List -->
      <% if (addresses && addresses.length > 0) { %>
        <ul class="address-list">
          <% addresses.forEach((addr, index) => { %>
            <li class="address-item <%= index === 0 ? 'default-address' : '' %>">
              <input type="radio" class="address-radio form-check-input" name="selectedAddress" value="<%= addr._id %>" <%= index === 0 ? 'checked' : '' %>>

              <!-- View Mode -->
              <div class="address-details">
                <div class="detail-row">
                  <span class="detail-label">Name:</span>
                  <span class="detail-value"><%= user.name %></span>
                </div>
                <div class="detail-row">
                  <span class="detail-label">Phone:</span>
                  <span class="detail-value"><%= user.phone || 'Not provided' %></span>
                </div>
                <div class="detail-row">
                  <span class="detail-label">Address:</span>
                  <span class="detail-value"><%= addr.name %></span>
                </div>
                <div class="detail-row">
                  <span class="detail-label">City:</span>
                  <span class="detail-value"><%= addr.city %></span>
                </div>
                <div class="detail-row">
                  <span class="detail-label">State:</span>
                  <span class="detail-value"><%= addr.state %></span>
                </div>
                <div class="detail-row">
                  <span class="detail-label">Pincode:</span>
                  <span class="detail-value"><%= addr.pincode %></span>
                </div>
              </div>

              <!-- Edit Mode -->
              <form class="address-edit-form row g-3">
                <input type="hidden" name="addressId" value="<%= addr._id %>">
                <div class="col-md-6">
                  <label class="form-label">Name</label>
                  <input type="text" class="form-control" value="<%= user.name || '' %>" readonly>
                </div>
                <div class="col-md-6">
                  <label class="form-label">Phone</label>
                  <input type="text" class="form-control" value="<%= user.phone || '' %>" readonly>
                </div>
                <div class="col-md-12">
                  <label class="form-label">Address</label>
                  <input type="text" class="form-control" name="name" value="<%= addr.name %>" maxlength="40" required>
                </div>
                <div class="col-md-12">
                  <label class="form-label">City</label>
                  <input type="text" class="form-control" name="city" value="<%= addr.city %>" maxlength="40" required>
                </div>
                <div class="col-md-6">
                  <label class="form-label">State</label>
                  <input type="text" class="form-control" name="state" value="<%= addr.state %>" maxlength="40" required>
                </div>
                <div class="col-md-6">
                  <label class="form-label">Pincode</label>
                  <input type="text" class="form-control" name="pincode" value="<%= addr.pincode %>" maxlength="6" required>
                </div>
                <div class="col-12 form-actions">
                  <button type="button" class="btn btn-secondary cancel-edit-btn me-2">Cancel</button>
                  <button type="submit" class="btn btn-dark save-edit-btn">
                    Save Changes
                  </button>
                </div>
              </form>

              <!-- Actions -->
              <div class="address-actions">
                <button type="button" class="btn btn-edit" data-id="<%= addr._id %>">
                  Edit
                </button>
                <button type="button" class="btn btn-delete" data-id="<%= addr._id %>">
                  Delete
                </button>
              </div>
            </li>
          <% }) %>
        </ul>
      <% } else { %>
        <div class="text-center py-3">
          <i class="bi bi-geo-alt" style="font-size: 3rem; color: #666; display: block; margin-bottom: 1rem;"></i>
          <h5>No Addresses Added</h5>
          <p class="text-muted">Add your first delivery address to get started.</p>
        </div>
      <% } %>
    </div>

    <div class="col-md-6">
      <h5>Order Summary</h5>
      <div class="card">
        <div class="card-body">
          <% if(cart && cart.items.length > 0) { %>
            <% cart.items.forEach(item => { %>
              <div class="d-flex justify-content-between border-bottom py-2">
                <div>
                  <img src="/uploads/products/<%= item.product.productImage[0] %>" width="50" height="50">
                  <span><%= item.product.productName %> (x<%= item.quantity %>)</span>
                </div>
                <div>₹<%= (item.product.discountPrice || item.product.price) * item.quantity %></div>
              </div>
            <% }) %>

            <hr>
            <div class="d-flex justify-content-between"><span>Subtotal:</span><span>₹<%= subtotal %></span></div>
            <div class="d-flex justify-content-between"><span>Tax (5%):</span><span>₹<%= tax.toFixed(2) %></span></div>
            <div class="d-flex justify-content-between"><span>Shipping:</span><span>₹<%= shipping %></span></div>
            <div class="d-flex justify-content-between"><strong>Total:</strong><strong>₹<%= finalTotal.toFixed(2) %></strong></div>

            <button id="placeOrderBtn" class="btn btn-primary w-100 mt-3">Place Order (COD)</button>
          <% } else { %>
            <p class="text-center">Your cart is empty.</p>
          <% } %>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  // Generic validation function
  function validateAddress(formData) {
    const { name: address, city, state, pincode } = formData;
    if (!address || address.trim().length === 0) return { valid: false, msg: 'Address is required' };
    if (address.trim().length > 40) return { valid: false, msg: 'Address must be 40 characters or less' };
    if (!city || city.trim().length === 0) return { valid: false, msg: 'City is required' };
    if (city.trim().length > 40) return { valid: false, msg: 'City must be 40 characters or less' };
    if (!state || state.trim().length === 0) return { valid: false, msg: 'State is required' };
    if (state.trim().length > 40) return { valid: false, msg: 'State must be 40 characters or less' };
    if (!pincode || pincode.trim().length !== 6 || !/^\d{6}$/.test(pincode.trim())) return { valid: false, msg: 'Pincode must be exactly 6 digits' };
    return { valid: true };
  }

  // Trim form data
  function trimFormData(formData) {
    const trimmed = { ...formData };
    Object.keys(trimmed).forEach(key => {
      if (key !== 'addressId') trimmed[key] = trimmed[key].trim();
    });
    return trimmed;
  }

  // Add New Address Handler
  document.getElementById('addAddressTrigger')?.addEventListener('click', () => {
    document.getElementById('addAddressTrigger').style.display = 'none';
    document.getElementById('addAddressForm').style.display = 'block';
  });

  document.getElementById('cancelAddBtn')?.addEventListener('click', () => {
    document.getElementById('addAddressForm').style.display = 'none';
    document.getElementById('addAddressTrigger').style.display = 'block';
    document.getElementById('addAddressForm').reset();
  });

  document.getElementById('addAddressForm')?.addEventListener('submit', async (e) => {
    e.preventDefault();
    const formData = trimFormData(Object.fromEntries(new FormData(e.target).entries()));
    const validation = validateAddress(formData);
    if (!validation.valid) {
      Swal.fire('Error', validation.msg, 'error');
      return;
    }

    const submitBtn = e.target.querySelector('button[type="submit"]');
    const originalText = submitBtn.innerHTML;
    submitBtn.disabled = true;
    submitBtn.innerHTML = 'Adding...';

    try {
   const res = await fetch('/address', {
  method: 'POST',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify(formData)
});
      if (!res.ok) {
        let errorMsg = `Server error (${res.status})`;
        try {
          const errorData = await res.json();
          errorMsg = errorData.message || errorMsg;
        } catch {} 
        throw new Error(errorMsg);
      }

      const data = await res.json();
      if (data.success) {
        Swal.fire('Success', data.message, 'success').then(() => {
          window.location.reload();
        });
      } else {
        throw new Error(data.message || 'Failed to add address');
      }
    } catch (err) {
      Swal.fire('Error', err.message, 'error');
    } finally {
      submitBtn.disabled = false;
      submitBtn.innerHTML = originalText;
    }
  });

  // Edit Handlers (per address)
  document.querySelectorAll('.btn-edit')?.forEach(btn => {
    btn.addEventListener('click', (e) => {
      const addressItem = e.target.closest('.address-item');
      addressItem.classList.add('editing');
    });
  });

  // Cancel Edit
  document.addEventListener('click', (e) => {
    if (e.target.classList.contains('cancel-edit-btn')) {
      e.target.closest('.address-item').classList.remove('editing');
    }
  });

  // Save Edit
  document.addEventListener('submit', async (e) => {
    if (e.target.classList.contains('address-edit-form')) {
      e.preventDefault();
      const formData = trimFormData(Object.fromEntries(new FormData(e.target).entries()));
      const { addressId } = formData;
      const validation = validateAddress(formData);
      if (!validation.valid) {
        Swal.fire('Error', validation.msg, 'error');
        return;
      }

      const submitBtn = e.target.querySelector('.save-edit-btn');
      const originalText = submitBtn.innerHTML;
      submitBtn.disabled = true;
      submitBtn.innerHTML = 'Saving...';

      try {
        const res = await fetch(`/user/address/edit/${addressId}`, {
          method: 'PUT',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(formData)
        });

        if (!res.ok) {
          let errorMsg = `Server error (${res.status})`;
          try {
            const errorData = await res.json();
            errorMsg = errorData.message || errorMsg;
          } catch {}
          throw new Error(errorMsg);
        }

        const data = await res.json();
        if (data.success) {
          Swal.fire('Success', data.message, 'success').then(() => {
            window.location.reload();
          });
        } else {
          throw new Error(data.message || 'Failed to update address');
        }
      } catch (err) {
        Swal.fire('Error', err.message, 'error');
      } finally {
        submitBtn.disabled = false;
        submitBtn.innerHTML = originalText;
      }
    }
  });

  // Delete Address
  document.querySelectorAll('.btn-delete')?.forEach(btn => {
    btn.addEventListener('click', async (e) => {
      const addressId = e.target.dataset.id;
      const result = await Swal.fire({
        title: 'Are you sure?',
        text: 'This address will be permanently deleted!',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#d33',
        cancelButtonColor: '#3085d6',
        confirmButtonText: 'Yes, delete it!'
      });

      if (result.isConfirmed) {
        try {
          const res = await fetch(`/user/address/delete/${addressId}`, { method: 'DELETE' });
          if (res.ok) {
            const data = await res.json();
            Swal.fire('Deleted!', data.message || 'Address has been deleted.', 'success').then(() => {
              window.location.reload();
            });
          } else {
            const errorData = await res.json();
            Swal.fire('Error', errorData.message || 'Failed to delete address', 'error');
          }
        } catch (err) {
          Swal.fire('Error', 'Network error. Please try again.', 'error');
        }
      }
    });
  });

  // PLACE ORDER
  document.getElementById("placeOrderBtn")?.addEventListener("click", async () => {
    const selectedAddressId = document.querySelector('input[name="selectedAddress"]:checked')?.value;
    if (!selectedAddressId) {
      return Swal.fire({ icon: 'warning', title: 'No Address Selected', text: 'Please select an address.' });
    }

    try {
      const res = await fetch("/checkout/place-order", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ addressId: selectedAddressId })
      });
      const data = await res.json();
      if (data.success) {
        window.location.href = data.redirect;
      } else {
        Swal.fire({ icon: 'error', title: 'Order Failed', text: data.message || 'Something went wrong.' });
      }
    } catch (err) {
      console.error(err);
      Swal.fire({ icon: 'error', title: 'Server Error', text: 'Unable to place order.' });
    }
  });
</script>

<%- include("../partials/user/footer") %>