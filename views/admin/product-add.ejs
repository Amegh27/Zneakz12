<!DOCTYPE html>
<html lang="en">
  <head>
    <%- include("../partials/admin/header") %>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Add New Product</title>

    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" />
    <link href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.css" rel="stylesheet" />

    <style>
      /* Prevent layout shift when modal toggles scrollbar */
      html { overflow-y: scroll; }

      body { background-color: #f8f9fa; }
      .navbar-brand { font-weight: bold; }
      .footer {
        background-color: #343a40;
        color: white;
        padding: 20px 0;
        text-align: center;
        margin-top: 40px;
      }
      .error-message { color: red; }

      .thumbnails-container {
        display: flex;
        align-items: center;
        gap: 10px;
        overflow-x: auto;
        padding: 6px 0;
      }
      .thumb {
        position: relative;
        width: 80px;
        height: 80px;
        border-radius: 6px;
        overflow: hidden;
        border: 1px solid #dee2e6;
        background: #fff;
        flex-shrink: 0;
        cursor: pointer;
        transition: transform 0.2s;
      }
      .thumb:hover {
        transform: scale(1.05);
      }
      .thumb img {
        width: 100%;
        height: 100%;
        object-fit: cover;
        display: block;
      }
      .thumb-actions {
        position: absolute;
        inset: auto 4px 4px 4px;
        display: flex;
        justify-content: flex-end;
        gap: 4px;
      }
      .thumb-btn {
        border: none;
        border-radius: 4px;
        padding: 2px 6px;
        font-size: 12px;
        line-height: 1;
        cursor: pointer;
        background: rgba(0, 0, 0, 0.7);
        color: #fff;
        transition: background 0.2s;
      }
      .thumb-btn:hover { background: rgba(0, 0, 0, 0.85); }

      /* Modern crop modal styling - full screen for larger image preview */
      #cropModal .modal-dialog {
        margin: 0;
      }
      #cropModal .modal-dialog .modal-fullscreen {
        width: 100vw;
        height: 100vh;
      }
      #cropModal .modal-content {
        border: none;
        border-radius: 0;
        box-shadow: none;
        height: 100vh;
        display: flex;
        flex-direction: column;
      }
      #cropModal .modal-header {
        background: linear-gradient(135deg, #343a40 0%, #2c3034 100%);
        color: white;
        border: none;
        padding: 15px 20px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
      }
      #cropModal .modal-header .btn-close {
        filter: brightness(0) invert(1);
        opacity: 0.7;
        transition: opacity 0.2s;
      }
      #cropModal .modal-header .btn-close:hover {
        opacity: 1;
      }
      #cropModal .modal-title {
        font-weight: 700;
        font-size: 1.5rem;
        letter-spacing: 0.5px;
      }
      #cropModal .modal-body {
        background-color: #f8f9fa;
        padding: 10px;
        flex: 1;
        overflow: hidden;
        display: flex;
        flex-direction: column;
      }

      /* Full-size crop container for bigger image */
      .crop-container {
        flex: 1;
        width: 100%;
        height: 100%;
        overflow: hidden;
        background: #ffffff;
        border-radius: 0;
        border: none;
        box-shadow: none;
        display: flex;
        align-items: center;
        justify-content: center;
      }
      .crop-container img {
        max-width: 100%;
        max-height: 100%;
        display: block;
      }

      /* Modern crop controls styling - adjusted for full screen */
      .crop-controls {
        display: flex;
        gap: 12px;
        justify-content: flex-end;
        flex-wrap: wrap;
        padding: 10px;
        background: #f8f9fa;
        border-top: 1px solid #dee2e6;
      }
      .crop-controls button {
        min-width: 140px;
        font-weight: 600;
        border-radius: 6px;
        padding: 10px 20px;
        font-size: 14px;
        transition: all 0.3s ease;
        border: none;
      }
      .crop-controls .btn-secondary {
        background-color: #6c757d;
        color: white;
      }
      .crop-controls .btn-secondary:hover {
        background-color: #5a6268;
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
      }
      .crop-controls .btn-primary {
        background-color: #0d6efd;
        color: white;
      }
      .crop-controls .btn-primary:hover {
        background-color: #0b5ed7;
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(13, 110, 253, 0.3);
      }

      /* Cropper.js styling */
      #cropModal .cropper-container {
        background: #ffffff;
      }
      #cropModal .cropper-modal {
        background: rgba(0, 0, 0, 0.4);
      }
      #cropModal .cropper-guides {
        opacity: 0.6;
      }
      #cropModal .cropper-center {
        background-color: rgba(13, 110, 253, 0.3);
      }
      #cropModal .cropper-face {
        background-color: rgba(13, 110, 253, 0.15);
        border: 2px solid #0d6efd;
      }
      #cropModal .cropper-line {
        background-color: #0d6efd;
      }
      #cropModal .cropper-box {
        border: 2px solid #0d6efd;
      }
      #cropModal .cropper-point {
        background-color: #0d6efd;
      }
    </style>
  </head>

  <body>
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
      <div class="container-fluid px-4">
        <a class="navbar-brand" href="/admin">Add products</a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#adminNavbar">
          <span class="navbar-toggler-icon"></span>
        </button>
      </div>
    </nav>

    <section class="content-main">
      <div class="row">
        <div class="col-12 col-lg-9">
          <div class="content-header">
            <h2 class="content-title">Add New Product</h2>
          </div>
        </div>

        <div class="col-lg-6">
          <div class="card mb-4">
            <div class="card-body">
              <form id="productForm" method="post" action="/admin/product-add" enctype="multipart/form-data">
                <div class="mb-4">
                  <label for="product_name" class="form-label">Product Name</label>
                  <input type="text" placeholder="Type here" name="productName" class="form-control border" id="product_name"  />
                  <div id="productName-error" class="error-message"></div>
                </div>

                <div class="mb-4">
                  <label class="form-label">Full description</label>
                  <textarea placeholder="Type here" id="descriptionid" name="description" class="form-control border" rows="4" ></textarea>
                  <div id="description-error" class="error-message"></div>
                </div>

                <div class="row">
                  <div class="col-lg-4">
                    <div class="mb-4">
                      <label class="form-label">Price (₹)</label>
                      <input id="regularPrice" name="price" type="number" min="0" step="0.01" class="form-control border"  />
                    </div>
                  </div>

                  <div class="col-lg-4">
                    <div class="mb-4">
                      <label class="form-label">Discount Price (₹)</label>
                      <input id="salesPrice" name="discountPrice" type="number" min="0" step="0.01" class="form-control border" />
                      <div id="salesPrice-error" class="error-message"></div>
                    </div>
                  </div>

                 <div class="card mb-4">
  <div class="card-header"><h4>Size & Stock</h4></div>
  <div class="card-body row">
    <% const availableSizes = ["6","7","8","9","10"]; %>
    <% availableSizes.forEach((size, index) => { %>
      <div class="col-lg-2 mb-3">
        <label class="form-label">Size <%= size %></label>
        <input type="number" class="form-control border" name="sizes[<%= index %>][stock]" min="0" value="0" />
        <input type="hidden" name="sizes[<%= index %>][size]" value="<%= size %>" />
      </div>
    <% }); %>
  </div>
</div>

                </div>

                <div class="card mb-4">
                  <div class="card-body">
                    <div class="row gx-2">
                      <div class="col-sm-6 mb-3">
                        <label class="form-label">Category</label>
                        <select class="form-select border" style="width: 200px" name="category" >
                          <% for (let i=0; i < cat.length; i++) { %>
                            <option value="<%= cat[i].name %>"><%= cat[i].name %></option>
                          <% } %>
                        </select>
                        <div id="category-error" class="error-message"></div>
                      </div>
                    </div>
                  </div>
                </div>

                <div class="card mb-4">
                  <div class="card-header"><h4>Choose Images</h4></div>
                  <div class="card-body">
                    <input class="form-control mb-3" type="file" name="images" id="imageInput" multiple accept="image/png, image/jpeg, image/jpg" />
                    <div id="images-error" class="error-message"></div>
                    <div id="addedImagesContainer" class="thumbnails-container"></div>
                  </div>
                </div>

                <div class="form-check mb-3">
                  <input class="form-check-input" type="checkbox" name="isPublished" id="isPublished" checked />
                  <label class="form-check-label" for="isPublished">Publish Product</label>
                </div>

                <div>
                  <button class="btn btn-md btn-primary rounded font-sm" type="submit">Publish</button>
                </div>
              </form>
            </div>
          </div>
        </div>
      </div>
    </section>

    <!-- Modern crop modal with full screen for larger image preview -->
    <div class="modal fade" id="cropModal" tabindex="-1" aria-hidden="true">
      <div class="modal-dialog modal-fullscreen">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">Crop Image</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <div class="crop-container">
              <img id="cropImage" src="/placeholder.svg" alt="crop" />
            </div>
            <div class="crop-controls">
              <button type="button" class="btn btn-secondary" id="resetCropBtn">Reset</button>
              <button type="button" class="btn btn-primary" id="applyCropBtn">Apply Crop</button>
            </div>
          </div>
        </div>
      </div>
    </div>

    <div class="modal fade" id="productSuccessModal" tabindex="-1" aria-hidden="true">
      <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">Success</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <p><%= typeof successMessage !== 'undefined' ? successMessage : '' %></p>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-primary" data-bs-dismiss="modal">OK</button>
          </div>
        </div>
      </div>
    </div>

    <footer class="footer mt-auto">
      <div class="container">
        <p class="mb-0">&copy; <%= new Date().getFullYear() %> Zneakz Admin Panel. All rights reserved.</p>
      </div>
    </footer>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.js"></script>

<script>
document.addEventListener('DOMContentLoaded', () => {
  const form = document.getElementById('productForm');
  let imageInput = document.getElementById('imageInput');
  const addedImagesContainer = document.getElementById('addedImagesContainer');

  const productNameInput = document.getElementById('product_name');
  const descriptionInput = document.getElementById('descriptionid');
  const quantityInput = document.getElementById('quantity');
  const categorySelect = document.querySelector("select[name='category']");
  const regularPriceInput = document.getElementById('regularPrice');
  const salesPriceInput = document.getElementById('salesPrice');

  const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png'];
  const selectedFiles = [];
  let isUpdatingFiles = false;

  let cropper = null;
  let currentCropIndex = -1;
  const cropModal = new bootstrap.Modal(document.getElementById('cropModal'));
  const cropImage = document.getElementById('cropImage');
  const resetCropBtn = document.getElementById('resetCropBtn');
  const applyCropBtn = document.getElementById('applyCropBtn');

  const freshInput = imageInput.cloneNode(true);
  imageInput.parentNode.replaceChild(freshInput, imageInput);
  imageInput = freshInput;

  function renderThumbnails() {
    addedImagesContainer.innerHTML = '';
    selectedFiles.forEach((file, idx) => {
      const wrapper = document.createElement('div');
      wrapper.className = 'thumb';
      wrapper.dataset.index = String(idx);

      const img = document.createElement('img');
      img.alt = 'thumbnail';
      img.src = URL.createObjectURL(file);

      const actions = document.createElement('div');
      actions.className = 'thumb-actions';

      const removeBtn = document.createElement('button');
      removeBtn.type = 'button';
      removeBtn.className = 'thumb-btn';
      removeBtn.textContent = '×';
      removeBtn.dataset.action = 'remove';

      const cropBtn = document.createElement('button');
      cropBtn.type = 'button';
      cropBtn.className = 'thumb-btn';
      cropBtn.textContent = 'crop';
      cropBtn.dataset.action = 'crop';

      actions.appendChild(cropBtn);
      actions.appendChild(removeBtn);
      wrapper.appendChild(img);
      wrapper.appendChild(actions);
      addedImagesContainer.appendChild(wrapper);
    });
  }

  function syncInputFilesFromState() {
    const dt = new DataTransfer();
    selectedFiles.forEach(f => dt.items.add(f));
    isUpdatingFiles = true;
    imageInput.files = dt.files;
    setTimeout(() => { isUpdatingFiles = false; }, 0);
  }

  function initCropper(file, index) {
    currentCropIndex = index;
    const reader = new FileReader();
    reader.onload = (e) => {
      cropImage.src = e.target.result;
      
      if (cropper) {
        cropper.destroy();
      }
      
      cropper = new Cropper(cropImage, {
        aspectRatio: NaN,
        viewMode: 1,
        autoCropArea: 1,
        responsive: true,
        restore: true,
        guides: true,
        center: true,
        highlight: true,
        cropBoxMovable: true,
        cropBoxResizable: true,
        toggleDragModeOnDblclick: true,
      });
      
      cropModal.show();
    };
    reader.readAsDataURL(file);
  }

  resetCropBtn.addEventListener('click', () => {
    if (cropper) {
      cropper.reset();
    }
  });

  applyCropBtn.addEventListener('click', () => {
    if (cropper && currentCropIndex >= 0) {
      const canvas = cropper.getCroppedCanvas();
      canvas.toBlob((blob) => {
        const croppedFile = new File([blob], selectedFiles[currentCropIndex].name, {
          type: 'image/png',
          lastModified: Date.now(),
        });
        selectedFiles[currentCropIndex] = croppedFile;
        renderThumbnails();
        syncInputFilesFromState();
        cropModal.hide();
      });
    }
  });

  imageInput.addEventListener('change', (e) => {
    if (isUpdatingFiles) return;
    const files = Array.from(e.target.files);
    const valid = [];

    for (const file of files) {
      if (!allowedTypes.includes(file.type)) {
        Swal.fire({ icon: 'error', title: 'Invalid file type', text: 'Only JPG, JPEG, or PNG images are allowed.', confirmButtonColor: '#d33' });
      } else {
        valid.push(file);
      }
    }

    if (valid.length === 0) {
      selectedFiles.splice(0);
      renderThumbnails();
      syncInputFilesFromState();
      return;
    }

    if (valid.length > 4) {
      Swal.fire({ icon: 'error', title: 'Too Many Images', text: 'You can upload a maximum of 4 images.', confirmButtonColor: '#d33' });
      valid.length = 4;
    }

    selectedFiles.splice(0, selectedFiles.length, ...valid);
    renderThumbnails();
    syncInputFilesFromState();
  });

  addedImagesContainer.addEventListener('click', (e) => {
    const btn = e.target.closest('.thumb-btn');
    if (!btn) return;

    const wrapper = e.target.closest('.thumb');
    if (!wrapper) return;
    const idx = Number(wrapper.dataset.index);
    if (Number.isNaN(idx)) return;

    const action = btn.dataset.action;
    if (action === 'crop') {
      initCropper(selectedFiles[idx], idx);
      return;
    }
    if (action === 'remove') {
      selectedFiles.splice(idx, 1);
      renderThumbnails();
      syncInputFilesFromState();
      return;
    }
  });

  form.addEventListener('submit', async (e) => {
    e.preventDefault();

    const productName = productNameInput.value.trim();
    const description = descriptionInput.value.trim();
    const category = categorySelect.value.trim();
    const regularPrice = parseFloat(regularPriceInput.value);
    const salesPrice = parseFloat(salesPriceInput.value);
    const files = Array.from(imageInput.files);

// Check total stock from size inputs
const sizeInputs = form.querySelectorAll("input[name^='sizes'][name$='[stock]']");
let totalStock = 0;
sizeInputs.forEach(input => {
  const val = parseInt(input.value, 10) || 0;
  totalStock += val;
});

if (!productName || !description || !category || Number.isNaN(regularPrice)) {
  return Swal.fire({
    icon: 'error',
    title: 'Missing Fields',
    text: 'Please fill in all required fields.',
    confirmButtonColor: '#d33'
  });
}

if (totalStock <= 0) {
  return Swal.fire({
    icon: 'error',
    title: 'Invalid Stock',
    text: 'Please add stock for at least one size.',
    confirmButtonColor: '#d33'
  });
}


    if (!Number.isNaN(regularPrice) && !Number.isNaN(salesPrice) && salesPrice > regularPrice) {
      return Swal.fire({ icon: 'error', title: 'Invalid Price', text: 'Discount price cannot exceed regular price.', confirmButtonColor: '#d33' });
    }

    if (files.length === 0) {
      return Swal.fire({ icon: 'error', title: 'No Images Uploaded', text: 'Please upload at least one product image.', confirmButtonColor: '#d33' });
    }

    if (files.length > 4) {
      return Swal.fire({ icon: 'error', title: 'Too Many Images', text: 'You can upload a maximum of 4 images.', confirmButtonColor: '#d33' });
    }

    const formData = new FormData(form);

    try {
      const res = await fetch('/admin/product-add', {
        method: 'POST',
        body: formData
      });
      const data = await res.json();

      if (res.ok) {
        Swal.fire({
          icon: 'success',
          title: 'Success!',
          text: data.message,
          showConfirmButton: false,
          timer: 1500
        }).then(() => {
          window.location.href = '/admin/products';
        });
      } else {
        Swal.fire({
          icon: 'error',
          title: 'Duplicate Product!',
          text: data.error || 'Product already exists. Try a different name.',
          confirmButtonColor: '#d33'
        });
      }
    } catch (error) {
      Swal.fire({
        icon: 'error',
        title: 'Server Error',
        text: 'Something went wrong while adding the product.',
        confirmButtonColor: '#d33'
      });
    }
  });
});
</script>

    <%- include("../partials/admin/footer") %>
  </body>
</html>