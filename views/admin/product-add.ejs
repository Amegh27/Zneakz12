<!DOCTYPE html>
<html lang="en">
  <head>
    <%- include("../partials/admin/header") %>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Add New Product</title>

    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/cropperjs@1.6.2/dist/cropper.min.css" />

    <style>
      /* Prevent layout shift when modal toggles scrollbar */
      html { overflow-y: scroll; }

      body { background-color: #f8f9fa; }
      .navbar-brand { font-weight: bold; }
      .footer {
        background-color: #343a40;
        color: white;
        padding: 20px 0;
        text-align: center;
        margin-top: 40px;
      }
      .error-message { color: red; }

      .thumbnails-container {
        display: flex;
        align-items: center;
        gap: 10px;
        overflow-x: auto;
        padding: 6px 0;
      }
      .thumb {
        position: relative;
        width: 80px;
        height: 80px;
        border-radius: 6px;
        overflow: hidden;
        border: 1px solid #dee2e6;
        background: #fff;
        flex-shrink: 0;
      }
      .thumb img {
        width: 100%;
        height: 100%;
        object-fit: cover;
        display: block;
      }
      .thumb-actions {
        position: absolute;
        inset: auto 4px 4px 4px;
        display: flex;
        justify-content: space-between;
        gap: 4px;
      }
      .thumb-btn {
        border: none;
        border-radius: 4px;
        padding: 2px 6px;
        font-size: 12px;
        line-height: 1;
        cursor: pointer;
        background: rgba(0, 0, 0, 0.7);
        color: #fff;
      }
      .thumb-btn:hover { background: rgba(0, 0, 0, 0.85); }

      /* Crop modal image fit */
      #cropImage { max-width: 100%; display: block; margin: 0 auto; }
      .img-container { width: 100%; max-height: 60vh; }
    </style>
  </head>

  <body>
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
      <div class="container-fluid px-4">
        <a class="navbar-brand" href="/admin">Add products</a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#adminNavbar">
          <span class="navbar-toggler-icon"></span>
        </button>
      </div>
    </nav>

    <section class="content-main">
      <div class="row">
        <div class="col-12 col-lg-9">
          <div class="content-header">
            <h2 class="content-title">Add New Product</h2>
          </div>
        </div>

        <div class="col-lg-6">
          <div class="card mb-4">
            <div class="card-body">
              <form id="productForm" method="post" action="/admin/product-add" enctype="multipart/form-data">
                <div class="mb-4">
                  <label for="product_name" class="form-label">Product Name</label>
                  <input type="text" placeholder="Type here" name="productName" class="form-control border" id="product_name"  />
                  <div id="productName-error" class="error-message"></div>
                </div>

                <div class="mb-4">
                  <label class="form-label">Full description</label>
                  <textarea placeholder="Type here" id="descriptionid" name="description" class="form-control border" rows="4" ></textarea>
                  <div id="description-error" class="error-message"></div>
                </div>

                <div class="row">
                  <div class="col-lg-4">
                    <div class="mb-4">
                      <label class="form-label">Price (₹)</label>
                      <input id="regularPrice" name="price" type="number" min="0" step="0.01" class="form-control border"  />
                    </div>
                  </div>

                  <div class="col-lg-4">
                    <div class="mb-4">
                      <label class="form-label">Discount Price (₹)</label>
                      <input id="salesPrice" name="discountPrice" type="number" min="0" step="0.01" class="form-control border" />
                      <div id="salesPrice-error" class="error-message"></div>
                    </div>
                  </div>

                  <div class="col-lg-4">
                    <div class="mb-4">
                      <label for="quantity" class="form-label">Quantity</label>
                      <input type="number" class="form-control border" id="quantity" name="quantity" min="1" value="1"  />
                    </div>
                  </div>
                </div>

                <div class="card mb-4">
                  <div class="card-body">
                    <div class="row gx-2">
                      <div class="col-sm-6 mb-3">
                        <label class="form-label">Category</label>
                        <select class="form-select border" style="width: 200px" name="category" >
                          <% for (let i=0; i < cat.length; i++) { %>
                            <option value="<%= cat[i].name %>"><%= cat[i].name %></option>
                          <% } %>
                        </select>
                        <div id="category-error" class="error-message"></div>
                      </div>
                    </div>
                  </div>
                </div>

                <div class="card mb-4">
                  <div class="card-header"><h4>Choose Images</h4></div>
                  <div class="card-body">
                    <input class="form-control mb-3" type="file" name="images" id="imageInput" multiple accept="image/png, image/jpeg, image/jpg" />
                    <div id="images-error" class="error-message"></div>
                    <div id="addedImagesContainer" class="thumbnails-container"></div>
                  </div>

                  <div class="modal fade" id="imageCropModal" tabindex="-1" aria-labelledby="cropModalLabel" aria-hidden="true">
                    <div class="modal-dialog modal-lg modal-dialog-centered">
                      <div class="modal-content">
                        <div class="modal-header">
                          <h5 class="modal-title" id="cropModalLabel">Crop Image</h5>
                          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                          <div class="img-container">
                            <img id="cropImage" src="/placeholder.svg" alt="Image to crop" />
                          </div>
                        </div>
                        <div class="modal-footer">
                          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                          <div class="btn-group">
                            <button type="button" class="btn btn-outline-secondary" id="rotateLeftBtn">Rotate -90°</button>
                            <button type="button" class="btn btn-outline-secondary" id="rotateRightBtn">Rotate +90°</button>
                            <button type="button" class="btn btn-outline-secondary" id="flipHBtn">Flip H</button>
                            <button type="button" class="btn btn-outline-secondary" id="flipVBtn">Flip V</button>
                          </div>
                          <button type="button" class="btn btn-primary" id="cropButton">Crop & Save</button>
                          <div id="cropError" class="error-message" style="margin-left: 12px;"></div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>

                <div class="form-check mb-3">
                  <input class="form-check-input" type="checkbox" name="isPublished" id="isPublished" checked />
                  <label class="form-check-label" for="isPublished">Publish Product</label>
                </div>

                <div>
                  <button class="btn btn-md btn-primary rounded font-sm" type="submit">Publish</button>
                </div>
              </form>
            </div>
          </div>
        </div>
      </div>
    </section>

    <div class="modal fade" id="productSuccessModal" tabindex="-1" aria-hidden="true">
      <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">Success</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <p><%= typeof successMessage !== 'undefined' ? successMessage : '' %></p>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-primary" data-bs-dismiss="modal">OK</button>
          </div>
        </div>
      </div>
    </div>

    <footer class="footer mt-auto">
      <div class="container">
        <p class="mb-0">&copy; <%= new Date().getFullYear() %> Zneakz Admin Panel. All rights reserved.</p>
      </div>
    </footer>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/cropperjs@1.6.2/dist/cropper.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
document.addEventListener('DOMContentLoaded', () => {
  const form = document.getElementById('productForm');
  let imageInput = document.getElementById('imageInput');
  const addedImagesContainer = document.getElementById('addedImagesContainer');

  const productNameInput = document.getElementById('product_name');
  const descriptionInput = document.getElementById('descriptionid');
  const quantityInput = document.getElementById('quantity');
  const categorySelect = document.querySelector("select[name='category']");
  const regularPriceInput = document.getElementById('regularPrice');
  const salesPriceInput = document.getElementById('salesPrice');
  const salesPriceError = document.getElementById('salesPrice-error');

  const cropModalEl = document.getElementById('imageCropModal');
  const cropImageEl = document.getElementById('cropImage');
  const cropButton = document.getElementById('cropButton');
  const rotateLeftBtn = document.getElementById('rotateLeftBtn');
  const rotateRightBtn = document.getElementById('rotateRightBtn');
  const flipHBtn = document.getElementById('flipHBtn');
  const flipVBtn = document.getElementById('flipVBtn');
  const cropError = document.getElementById('cropError');

  const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png'];
  const selectedFiles = [];
  let croppingIndex = -1;
  let cropper = null;
  let isUpdatingFiles = false;

  const freshInput = imageInput.cloneNode(true);
  imageInput.parentNode.replaceChild(freshInput, imageInput);
  imageInput = freshInput;

  const bsCropModal = new bootstrap.Modal(cropModalEl, { backdrop: 'static', keyboard: false });

  function renderThumbnails() {
    addedImagesContainer.innerHTML = '';
    selectedFiles.forEach((file, idx) => {
      const wrapper = document.createElement('div');
      wrapper.className = 'thumb';
      wrapper.dataset.index = String(idx);

      const img = document.createElement('img');
      img.alt = 'thumbnail';
      img.src = URL.createObjectURL(file);

      const actions = document.createElement('div');
      actions.className = 'thumb-actions';

      const cropBtn = document.createElement('button');
      cropBtn.type = 'button';
      cropBtn.className = 'thumb-btn';
      cropBtn.textContent = 'Crop';
      cropBtn.dataset.action = 'crop';

      const removeBtn = document.createElement('button');
      removeBtn.type = 'button';
      removeBtn.className = 'thumb-btn';
      removeBtn.textContent = '×';
      removeBtn.dataset.action = 'remove';

      actions.appendChild(cropBtn);
      actions.appendChild(removeBtn);
      wrapper.appendChild(img);
      wrapper.appendChild(actions);
      addedImagesContainer.appendChild(wrapper);
    });
  }

  function syncInputFilesFromState() {
    const dt = new DataTransfer();
    selectedFiles.forEach(f => dt.items.add(f));
    isUpdatingFiles = true;
    imageInput.files = dt.files;
    setTimeout(() => { isUpdatingFiles = false; }, 0);
  }

  imageInput.addEventListener('change', (e) => {
    if (isUpdatingFiles) return;
    const files = Array.from(e.target.files);
    const valid = [];

    for (const file of files) {
      if (!allowedTypes.includes(file.type)) {
        Swal.fire({ icon: 'error', title: 'Invalid file type', text: 'Only JPG, JPEG, or PNG images are allowed.', confirmButtonColor: '#d33' });
      } else {
        valid.push(file);
      }
    }

    if (valid.length === 0) {
      selectedFiles.splice(0);
      renderThumbnails();
      syncInputFilesFromState();
      return;
    }

    if (valid.length > 4) {
      Swal.fire({ icon: 'error', title: 'Too Many Images', text: 'You can upload a maximum of 4 images.', confirmButtonColor: '#d33' });
      valid.length = 4;
    }

    selectedFiles.splice(0, selectedFiles.length, ...valid);
    renderThumbnails();
    syncInputFilesFromState();
  });

  addedImagesContainer.addEventListener('click', (e) => {
    const btn = e.target.closest('.thumb-btn');
    if (!btn) return;

    const wrapper = e.target.closest('.thumb');
    if (!wrapper) return;
    const idx = Number(wrapper.dataset.index);
    if (Number.isNaN(idx)) return;

    const action = btn.dataset.action;
    if (action === 'remove') {
      selectedFiles.splice(idx, 1);
      renderThumbnails();
      syncInputFilesFromState();
      return;
    }

    if (action === 'crop') {
      croppingIndex = idx;
      cropImageEl.src = URL.createObjectURL(selectedFiles[croppingIndex]);
      cropError.textContent = '';
      bsCropModal.show();
    }
  });

  cropModalEl.addEventListener('shown.bs.modal', () => {
    if (cropper) { try { cropper.destroy(); } catch {} cropper = null; }
    cropper = new Cropper(cropImageEl, {
      viewMode: 1,
      dragMode: 'move',
      autoCropArea: 1,
      responsive: true,
      background: false,
      checkOrientation: true,
      aspectRatio: 1,
      zoomOnWheel: true,
      zoomOnTouch: true,
    });
  });

  cropModalEl.addEventListener('hidden.bs.modal', () => {
    if (cropper) { cropper.destroy(); cropper = null; }
    cropImageEl.src = '';
    croppingIndex = -1;
  });

  rotateLeftBtn.addEventListener('click', () => { if (cropper) cropper.rotate(-90); });
  rotateRightBtn.addEventListener('click', () => { if (cropper) cropper.rotate(90); });
  let flippedH = false, flippedV = false;
  flipHBtn.addEventListener('click', () => {
    if (!cropper) return;
    flippedH = !flippedH;
    cropper.scaleX(flippedH ? -1 : 1);
  });
  flipVBtn.addEventListener('click', () => {
    if (!cropper) return;
    flippedV = !flippedV;
    cropper.scaleY(flippedV ? -1 : 1);
  });

  cropButton.addEventListener('click', () => {
    if (!cropper || croppingIndex < 0) return;

    const canvas = cropper.getCroppedCanvas({
      maxWidth: 2048,
      maxHeight: 2048,
      imageSmoothingEnabled: true,
      imageSmoothingQuality: 'high',
    });

    if (!canvas) {
      cropError.textContent = 'Unable to create cropped image.';
      return;
    }

    canvas.toBlob((blob) => {
      if (!blob) {
        cropError.textContent = 'Unable to save cropped image.';
        return;
      }

      const original = selectedFiles[croppingIndex];
      const mime = blob.type || 'image/jpeg';
      const base = original.name.replace(/\.[^.]+$/, '');
      const ext = mime === 'image/png' ? 'png' : 'jpg';
      const newFile = new File([blob], `${base}-cropped.${ext}`, { type: mime, lastModified: Date.now() });

      selectedFiles[croppingIndex] = newFile;
      syncInputFilesFromState();
      renderThumbnails();

      bsCropModal.hide();
    }, 'image/jpeg', 0.92);
  });

  form.addEventListener('submit', async (e) => {
    e.preventDefault();

    const productName = productNameInput.value.trim();
    const description = descriptionInput.value.trim();
    const quantity = parseInt(quantityInput.value, 10);
    const category = categorySelect.value.trim();
    const regularPrice = parseFloat(regularPriceInput.value);
    const salesPrice = parseFloat(salesPriceInput.value);
    const files = Array.from(imageInput.files);

    if (!productName || !description || !category || Number.isNaN(regularPrice) || Number.isNaN(quantity)) {
      return Swal.fire({ icon: 'error', title: 'Missing Fields', text: 'Please fill in all required fields.', confirmButtonColor: '#d33' });
    }

    if (quantity <= 0) {
      return Swal.fire({ icon: 'error', title: 'Invalid Quantity', text: 'Quantity must be greater than zero.', confirmButtonColor: '#d33' });
    }

    if (!Number.isNaN(regularPrice) && !Number.isNaN(salesPrice) && salesPrice > regularPrice) {
      return Swal.fire({ icon: 'error', title: 'Invalid Price', text: 'Discount price cannot exceed regular price.', confirmButtonColor: '#d33' });
    }

    if (files.length === 0) {
      return Swal.fire({ icon: 'error', title: 'No Images Uploaded', text: 'Please upload at least one product image.', confirmButtonColor: '#d33' });
    }

    if (files.length > 4) {
      return Swal.fire({ icon: 'error', title: 'Too Many Images', text: 'You can upload a maximum of 4 images.', confirmButtonColor: '#d33' });
    }

    const formData = new FormData(form);

    try {
      const res = await fetch('/admin/product-add', {
        method: 'POST',
        body: formData
      });
      const data = await res.json();

      if (res.ok) {
        Swal.fire({
          icon: 'success',
          title: 'Success!',
          text: data.message,
          showConfirmButton: false,
          timer: 1500
        }).then(() => {
          window.location.href = '/admin/products';
        });
      } else {
        Swal.fire({
          icon: 'error',
          title: 'Duplicate Product!',
          text: data.error || 'Product already exists. Try a different name.',
          confirmButtonColor: '#d33'
        });
      }
    } catch (error) {
      Swal.fire({
        icon: 'error',
        title: 'Server Error',
        text: 'Something went wrong while adding the product.',
        confirmButtonColor: '#d33'
      });
    }
  });
});
</script>


    <%- include("../partials/admin/footer") %>
  </body>
</html>
